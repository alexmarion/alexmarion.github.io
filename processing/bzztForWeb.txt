Bzzt b;
int xFunc, yFunc;
int clean, cleanCounter;
color[] colors;
color lightColor, middleColor, darkColor, contrastColor;
int numDrawn;

void setup() {
  background(0, 179, 254);
  size( $(window).width()/2, $(window).height()/2 );
  noStroke();
  smooth();

  xFunc = 1;
  yFunc = 2;

  lightColor = color(75, 255, 254);
  middleColor = color(0, 179, 254);
  darkColor = color(56, 0, 82);
  contrastColor = color(255, 87, 80);
  colors = new color[]{lightColor, middleColor, darkColor, contrastColor};

  b = new Bzzt(xFunc, yFunc, middleColor, darkColor);

  clean = 255;
  cleanCounter = 0;
  numDrawn = 0;
}

void draw() {
  drawSingle();
}

void cleanBzzt() {
  // Using rect instead of background to fade out
  fill(0, 179, 254, cleanCounter);
  rect(0, 0, width, height);
  cleanCounter++;
}

color chooseColor() {
  return colors[int(random(colors.length))];
}

void createBzzt(color start, color end) {
  b = new Bzzt(xFunc, yFunc, start, end);
  cleanCounter = 0;
}

void createBzzt() {
  color s = chooseColor();
  color e = chooseColor();
  while(s == e) {
    e = chooseColor();
  }
  createBzzt(s, e);
}

void drawSingle() {
  if (b.isStopped()) {
    if (cleanCounter < clean) {
      cleanBzzt();
    } else {
      createBzzt();
    }
  } else {
    b.make();
  }
}

class Bzzt {
  int xFunc, yFunc;

  int numCircles;
  float theta, r, x, y, xLoc, yLoc, angle, rotRate, pos, dist, growth, growthRate, size, maxEllipseSize, maxBzztSize;
  boolean out;

  color startColor, currentColor, endColor;
  float rColorDiff, gColorDiff, bColorDiff;
  float rRate, gRate, bRate;
  int colorSign, colorSteps, colorCounter;
  boolean colorSwitch;

  boolean stopped;

  Bzzt(int xFunc, int yFunc, color startColor, color endColor) {
    this.xFunc = xFunc;
    this.yFunc = yFunc;

    theta = 0;
    r = 1;
    x = 0;
    y = 0;
    
    xLoc = width/2;
    yLoc = height/2;

    angle = 0;
    rotRate = 0.01;
    out = true;
    growth = 0;
    growthRate = random(.1, .5);
    size = r;
    maxEllipseSize = height/2 * growthRate;
    maxBzztSize = random(50, height/2);
    if (maxBzztSize + maxEllipseSize/2 > height/2) {
      maxBzztSize -= maxEllipseSize/2;
    }

    this.startColor = startColor;
    this.endColor = endColor;
    colorSteps = int(maxBzztSize/random(1, 1.5));
    rColorDiff = red(startColor) - red(endColor);
    gColorDiff = green(startColor) - green(endColor);
    bColorDiff = blue(startColor) - blue(endColor);
    rRate = rColorDiff/colorSteps;
    gRate = gColorDiff/colorSteps;
    bRate = bColorDiff/colorSteps;

    currentColor = startColor;
    colorSign = 1;
    colorSwitch = true;

    stopped = false;
  }

  boolean isStopped() {
    return stopped;
  }

  void make() {
    translate(xLoc, yLoc);

    /* Color */
    if (colorCounter >= colorSteps) {
      colorSwitch = false;
    } else if (colorCounter <= 0) {
      colorSwitch = true;
    }

    if (colorSwitch) {
      colorSign = 1;
      colorCounter++;
    } else {
      colorSign = -1;
      colorCounter--;
    }

    float newR = red(currentColor) + (rRate * colorSign);
    float newG = green(currentColor) + (gRate * colorSign);
    float newB = blue(currentColor) + (bRate * colorSign);

    currentColor = color(newR, newG, newB);
    fill(currentColor);

    /* Position and rotation */
    rotate(angle);
    angle += rotRate;

    /* Travel direction */
    pushMatrix();
    if (dist >= (height - yLoc) - size || dist <= -(height - yLoc) + size) {
      out = false;
    }
    popMatrix();
     
    /* Stopping condition */
    if (dist <= 0 && out == false) {
      stopped = true;
    }

    if (out) {
      pos += 1;
      growth = growthRate;
    } else {
      pos -= 1;
      growth = -growthRate;
    }

    // Calculate new radius and size
    dist = r + pos;
    size = size + growth;

    for (int i = 1; i < 361; i += 30) { 
      // Conversion from polar to cartisian coordinates
      theta = radians(i);
      
      x = getPoint(xFunc);
      y = getPoint(yFunc);
      
      ellipse(x, y, size, size);
    }
  }

  float getPoint(int n) {
    switch(n) {
    case 1:
      return dist * sin(theta);
    case 2:
      return dist * cos(theta);
    case 3:
      return dist * tan(theta);
    default:
      return dist * sin(theta);
    }
  }
}

